package calculo;

public class SecTransversal {
	
	private double b1, c1; //b1 é a largura da mesa (aba) superior, c1 é a altura
	private double a1, a2; //a1 é a altura da alma, a2 é a largura
	private double b2, c2; //b2 é a largura da mesa (aba) inferior, c2 é a altura
	private double yBarra = 0.0; //posição do centroide da área total com relação à base da seção
	private double I = 0.0; //momento de segunda ordem da área total com relação a yBarra
	
	public SecTransversal(double b1, double c1, double a1, double a2, double b2, double c2) {
		setB1(b1);
		setC1(c1);
		setA1(a1);
		setA2(a2);
		setB2(b2);
		setC2(c2);
		calcYBarra();
		calcI();
	}
	
	//calcula o yBarra (posição do eixo neutro
	public void calcYBarra() {
		yBarra = ((c2 + a1 + c1 / 2.0) * c1 * b1 + (c2 + a1 / 2.0) * a1 * a2 + (c2 / 2.0) * c2 * b2) / (b1 * c1 + a2 * a1 + c2 * b2); 
	}
	
	//calcula o momento de segunda ordem da figura com relação ao eixo neutro
	//não invoque essa função sem antes ter invocado obterYBarra
	public void calcI() {
		I = ((Math.pow(c2, 3) * b2) / 12.0) + c2 * b2 * Math.pow(yBarra - c2 / 2.0, 2) + ((a2 * Math.pow(a1, 3)) / 12.0) + a1 * a2 * Math.pow(yBarra - (c2 + (a1 / 2.0)), 2);
		I += ((b1 * Math.pow(c1, 3)) / 12.0) + c1 * b1 * Math.pow(yBarra - (c2 + a1 + (c1 / 2.0)), 2);
	}
	
	//retorna a largura medida na "altura" fornecida da seção
	public double largura(double altura) {
		if(altura < c2) {
			return b2;
		}
		else if(c2 <= altura && altura <= c2 + a1) {
			return a2;
		}
		else {
			return b1;
		}
	}
	
	//calcula o momento de primeira ordem da área A'
	//a área A' é obtida fazendo um corte em "Altura" e considerando apenas a área da seção transversal acima desse corte
	public double calcQ(double altura) {
		double resultado = 0.0;
		if(altura > c2 + a1) {
			resultado = b1 * (c2 + a1 + c1 - altura);
			resultado = resultado * Math.abs(yBarra - (c2 + a1 + c1 + altura) / 2.0);
		}
		else if(c2 <= altura && altura <= c2 + a1) {
			resultado = Math.abs(yBarra - (c2 + a1 + c1 / 2.0)) * b1 * a1;
			resultado += Math.abs(yBarra - ((c2 + a1 + altura) / 2.0)) * a2 * (c2 + a1 - altura);
		}
		else {
			resultado = Math.abs(yBarra - (c2 + a1 + c1 / 2.0)) * b1 * c1;
			resultado += Math.abs(yBarra - c2 + a1 / 2.0) * a1 * a2;
			resultado += Math.abs(yBarra - (c2 + altura) / 2.0) * b2 * (c2 - altura);
		}
		return resultado;
	}
	
	//métodos get e set
	public double getYBarra() {
		return yBarra;
	}
	
	public double getI() {
		return I;
	}
	
	public void setB1(double valor) {
		b1 = valor;
	}
	
	public void setC1(double valor) {
		c1 = valor;
	}
	
	public void setB2(double valor) {
		b2 = valor;
	}
	
	public void setC2(double valor) {
		c2 = valor;
	}
	
	public void setA1(double valor) {
		a1 = valor;
	}
	
	public void setA2(double valor) {
		a2 = valor;
	}
	
}
